/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BODY;

import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import user.Connect;

/**
 *
 * @author HP
 */
public class reg extends javax.swing.JFrame {

    DefaultTableModel tbn = new DefaultTableModel();
    Connect a = new Connect();
    Connection con = a.getConnection();
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    private String MaND = "";
    int flag = 1;

    public reg() {
        initComponents();
        setLocationRelativeTo(null);
        //setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
        getConnection();
        getSumRow();
        SinhMaND();
    }

    public void getConnection() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=duan1;user=sa;password=sa2008");
            st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery("Select * from NguoiDung");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Main = new javax.swing.JPanel();
        Header = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Content = new javax.swing.JPanel();
        lblTaiKhoan = new javax.swing.JLabel();
        lblMatKhau = new javax.swing.JLabel();
        panelTaiKhoan = new javax.swing.JPanel();
        iconUsername = new javax.swing.JLabel();
        txtTaiKhoan = new javax.swing.JTextField();
        panelMatKhau = new javax.swing.JPanel();
        iconPassword = new javax.swing.JLabel();
        txtMatKhau = new javax.swing.JPasswordField();
        jCheckBox1 = new javax.swing.JCheckBox();
        panelThongTinUser = new javax.swing.JPanel();
        lblHovaten = new javax.swing.JLabel();
        lblGioitinh = new javax.swing.JLabel();
        lblNgaysinh = new javax.swing.JLabel();
        lblDiachi = new javax.swing.JLabel();
        lblSdt = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        rdbMale = new javax.swing.JRadioButton();
        rdbFemale = new javax.swing.JRadioButton();
        txtDate = new com.toedter.calendar.JDateChooser();
        btnReg = new BODY.Button.ButtonLogin();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 216, 224));

        Main.setBackground(new java.awt.Color(204, 216, 224));
        Main.setLayout(new java.awt.BorderLayout());

        Header.setBackground(new java.awt.Color(204, 216, 224));
        Header.setPreferredSize(new java.awt.Dimension(950, 100));
        Header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Title.setBackground(new java.awt.Color(255, 255, 255));
        Title.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("ĐĂNG KÝ TÀI KHOẢN");
        Header.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 100));

        jSeparator1.setBackground(new java.awt.Color(0, 120, 255));
        jSeparator1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jSeparator1.setOpaque(true);
        Header.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 75, 190, 5));

        Main.add(Header, java.awt.BorderLayout.PAGE_START);

        Content.setBackground(new java.awt.Color(204, 216, 224));
        Content.setBorder(null);
        Content.setPreferredSize(new java.awt.Dimension(950, 500));
        Content.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTaiKhoan.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblTaiKhoan.setText("Tài khoản");
        Content.add(lblTaiKhoan, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, 100, 35));

        lblMatKhau.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lblMatKhau.setText("Mật khẩu");
        Content.add(lblMatKhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 125, 100, 35));

        panelTaiKhoan.setLayout(new java.awt.BorderLayout());

        iconUsername.setBackground(new java.awt.Color(153, 153, 153));
        iconUsername.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconUsername.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/5402435_account_profile_user_avatar_man_icon.png"))); // NOI18N
        iconUsername.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        iconUsername.setOpaque(true);
        iconUsername.setPreferredSize(new java.awt.Dimension(40, 40));
        panelTaiKhoan.add(iconUsername, java.awt.BorderLayout.WEST);

        txtTaiKhoan.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtTaiKhoan.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelTaiKhoan.add(txtTaiKhoan, java.awt.BorderLayout.CENTER);

        Content.add(panelTaiKhoan, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 340, 40));

        panelMatKhau.setLayout(new java.awt.BorderLayout());

        iconPassword.setBackground(new java.awt.Color(153, 153, 153));
        iconPassword.setForeground(new java.awt.Color(153, 153, 153));
        iconPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/7491947_ui_key_password_lock_security_icon.png"))); // NOI18N
        iconPassword.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        iconPassword.setOpaque(true);
        iconPassword.setPreferredSize(new java.awt.Dimension(40, 40));
        panelMatKhau.add(iconPassword, java.awt.BorderLayout.WEST);

        txtMatKhau.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtMatKhau.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelMatKhau.add(txtMatKhau, java.awt.BorderLayout.CENTER);

        Content.add(panelMatKhau, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 165, 340, 40));

        jCheckBox1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jCheckBox1.setText("Hiện mật khẩu");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        Content.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 210, -1, 40));

        panelThongTinUser.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createTitledBorder(null, "Thông tin người dùng", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 18), new java.awt.Color(0, 0, 0)))); // NOI18N
        panelThongTinUser.setPreferredSize(new java.awt.Dimension(480, 420));
        panelThongTinUser.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblHovaten.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblHovaten.setText("Họ và tên");
        panelThongTinUser.add(lblHovaten, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 110, 40));

        lblGioitinh.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblGioitinh.setText("Giới tính");
        panelThongTinUser.add(lblGioitinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 110, 40));

        lblNgaysinh.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblNgaysinh.setText("Ngày sinh");
        panelThongTinUser.add(lblNgaysinh, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 110, 40));

        lblDiachi.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblDiachi.setText("Địa chỉ");
        panelThongTinUser.add(lblDiachi, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 110, 40));

        lblSdt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblSdt.setText("Số điện thoại");
        panelThongTinUser.add(lblSdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 110, 40));

        lblEmail.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblEmail.setText("Email");
        panelThongTinUser.add(lblEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 110, 40));

        txtHoTen.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtHoTen.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelThongTinUser.add(txtHoTen, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 300, 40));

        txtDiaChi.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtDiaChi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelThongTinUser.add(txtDiaChi, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 300, 40));

        txtSDT.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtSDT.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelThongTinUser.add(txtSDT, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, 300, 40));

        txtEmail.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtEmail.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelThongTinUser.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 300, 40));

        buttonGroup1.add(rdbMale);
        rdbMale.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        rdbMale.setText("NAM");
        panelThongTinUser.add(rdbMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, -1, 40));

        buttonGroup1.add(rdbFemale);
        rdbFemale.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        rdbFemale.setText("NỮ");
        panelThongTinUser.add(rdbFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, -1, 40));

        txtDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtDate.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        panelThongTinUser.add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 300, 40));

        Content.add(panelThongTinUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 480, 420));

        btnReg.setText("ĐĂNG KÝ");
        btnReg.setToolTipText("");
        btnReg.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        btnReg.setRadius(50);
        btnReg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegMouseClicked(evt);
            }
        });
        btnReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegActionPerformed(evt);
            }
        });
        Content.add(btnReg, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, 340, 50));

        jLabel5.setFont(new java.awt.Font("Dialog", 3, 16)); // NOI18N
        jLabel5.setText("Bạn đã có tài khoản ? ");
        Content.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 410, 170, 30));

        jLabel6.setFont(new java.awt.Font("Dialog", 3, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/7225775_arrow_login_icon.png"))); // NOI18N
        jLabel6.setText("Quay lại đăng nhập");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        Content.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(735, 410, 185, 30));

        Main.add(Content, java.awt.BorderLayout.CENTER);

        getContentPane().add(Main, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegMouseClicked
    }//GEN-LAST:event_btnRegMouseClicked

    private void btnRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegActionPerformed
        StringBuilder sb = new StringBuilder();
        try {
            if (txtTaiKhoan.getText().equals("") || txtMatKhau.getText().equals("") || txtHoTen.getText().equals("")
                    || txtDiaChi.getText().equals("") || txtSDT.getText().equals("") || txtEmail.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Dữ liệu không được bỏ trống!");
            } else {
                hopleTaiKhoan(sb);
                hopleMatKhau(sb);
                hopleEmail(sb);
                hopleSDT(sb);
                if (sb.length() > 0) { //nếu if trên đúng nó sẽ thêm vào sb 1 đoạn string, ktra độ dài chuỗi này nếu lớn hơn 0 tức là có thông báo
                    JOptionPane.showMessageDialog(this, sb.toString());
                } else {
                    SinhMaND();
                    addMaND();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi!!!");
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnRegActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) {
            txtMatKhau.setEchoChar((char) 0);
        } else {
            txtMatKhau.setEchoChar('*');
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        login r = new login();
        r.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jLabel6MouseClicked

    //Đếm số lượng dòng bài kiểm tra
    public void getSumRow() {
        try {
            pst = con.prepareStatement("Select * from NguoiDung");
            rs = pst.executeQuery();

            while (rs.next()) {
                flag++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi tải dữ liệu MaND!");
        }
    }

    //Sinh mã bài kiểm tra
    public void SinhMaND() {
        try {
            pst = con.prepareStatement("Select * from NguoiDung");
            rs = pst.executeQuery();

            int i = 1;
            while (rs.next()) {
                String checkMaND = rs.getString("MaND");

                String temp = "";
                if (i < 10) {
                    temp = "EFK00" + i;
                } else {
                    temp = "EFK0" + i;
                }

                if (i < flag - 1 && !checkMaND.trim().equals(temp)) {
                    if (i < 10) {
                        MaND = "EFK00" + i;
                    } else {
                        MaND = "EFK0" + i;
                    }
                    break;
                }
                i += 1;
                if (i == flag) {
                    if (i < 10) {
                        MaND = "EFK00" + i;
                    } else {
                        MaND = "EFK0" + i;
                    }
                }
            }
//            if (MaBKT.isEmpty()) {
//                MaBKT = "BKT0" + 1;
//            }
            //addMaBKT();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi tải dữ liệu MaND!");
        }
    }

    private void addMaND() throws HeadlessException, SQLException {
        boolean gt = true;
        if (rdbMale.isSelected()) {
            gt = true;
        } else {
            gt = false;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date = sdf.format(txtDate.getDate());
        String url = "insert into NguoiDung (MaND,TaiKhoan,MatKhau,HoTen,GioiTinh,NgaySinh,DiaChi,SDT,Email)\n"
                + "values ('" + MaND + "', N'" + txtTaiKhoan.getText() + "', '" + txtMatKhau.getText() + "', N'" + txtHoTen.getText() + "', '" + gt + "', '" + date + "', N'" + txtDiaChi.getText() + "', '" + txtSDT.getText() + "', '" + txtEmail.getText() + "')";
        pst = con.prepareStatement(url);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(null, "Đăng ký thành công!");
        
        login l = new login();
        l.setVisible(true);
        setVisible(false);
    }

    private void hopleTaiKhoan(StringBuilder sb) {
        try {
            String check_url = "Select * from NguoiDung where TaiKhoan = '" + txtTaiKhoan.getText() + "'";
            st = con.createStatement();
            rs = st.executeQuery(check_url);

            //Kiểm tra trùng id
            if (rs.next()) {
                sb.append("Tài khoản này đã tồn tại!\n");
                txtTaiKhoan.setBackground(Color.green);
            } else {
                //.*[A-Z] : phải có ít nhất 1 ký tự viết hoa
                Pattern patternUpper = Pattern.compile("^.*[A-Z]+.*$");

                //.*[a-z] : phải có ít nhất 1 ký tự viết thường
                Pattern patternLower = Pattern.compile("^.*[a-z]+.*$");

                //.*[0-9] : phải có ít nhất 1 ký tự số
                Pattern patternDigit = Pattern.compile("^.*[0-9]+.*$");

                //.*[#?!@$%^&*-] : phải có ít nhất 1 ký tự đặc biệt
                Pattern patternSpecial = Pattern.compile("^.*[#?!@$%^&*-]+.*$");

                //.*[#?!@$%^&*-] : phải có ít nhất 8 ký tự 
                Pattern patternLenght = Pattern.compile("^.*{8,}+.*$");

                String account = txtTaiKhoan.getText();

                if (patternUpper.matcher(account).find() || patternLower.matcher(account).find()
                        || patternDigit.matcher(account).find() || patternSpecial.matcher(account).find()
                        || patternLenght.matcher(account).find()) {
                    txtTaiKhoan.setBackground(Color.white);
                } else {
                    sb.append("Nhập lại tài khoản!.");
                    txtTaiKhoan.setBackground(Color.green);
                }
            }
        } catch (Exception e) {
        }
    }

    private void hopleMatKhau(StringBuilder sb) {
        //.*[A-Z] : phải có ít nhất 1 ký tự viết hoa
        Pattern patternUpper = Pattern.compile("^.*[A-Z]+.*$");

        //.*[a-z] : phải có ít nhất 1 ký tự viết thường
        Pattern patternLower = Pattern.compile("^.*[a-z]+.*$");

        //.*[0-9] : phải có ít nhất 1 ký tự số
        Pattern patternDigit = Pattern.compile("^.*[0-9]+.*$");

        //.*[#?!@$%^&*-] : phải có ít nhất 1 ký tự đặc biệt
        Pattern patternSpecial = Pattern.compile("^.*[#?!@$%^&*-]+.*$");

        //.*[#?!@$%^&*-] : phải có ít nhất 8 ký tự 
        Pattern patternLenght = Pattern.compile("^.*{8}+.*$");

        String password = txtMatKhau.getText();

        if (patternLenght.matcher(password).find()) {
            txtMatKhau.setBackground(Color.white);
        } else {
            sb.append("Nhập lại mật khẩu! Mật khẩu phải có 8 ký tự phân biệt. VD:admin123\n");
            txtMatKhau.setBackground(Color.green);
        }
    }

    private void hopleSDT(StringBuilder sb) {
        try {
            String check_url = "Select * from NguoiDung where SDT = '" + txtSDT.getText() + "'";
            st = con.createStatement();
            rs = st.executeQuery(check_url);

            //Kiểm tra trùng id
            if (rs.next()) {
                sb.append("Số điện thoại này đã tồn tại!\n");
                txtSDT.setBackground(Color.green);
            } else {
                String sdt = txtSDT.getText();
                Pattern p = Pattern.compile("^[0-9]{10}$");
                if (p.matcher(sdt).find()) {
                    txtSDT.setBackground(Color.white);
                } else {
                    sb.append("Số điện thoại không hợp lệ, phải gồm 10 chữ số, VD: 0123456789\n");
                    txtSDT.setBackground(Color.green);
                }
            }
        } catch (Exception e) {
        }
    }

    private void hopleEmail(StringBuilder sb) {
        try {
            String check_url = "Select * from NguoiDung where Email = '" + txtEmail.getText() + "'";
            st = con.createStatement();
            rs = st.executeQuery(check_url);

            //Kiểm tra trùng id
            if (rs.next()) {
                sb.append("Email này đã tồn tại!\n");
                txtEmail.setBackground(Color.green);
            } else {
                String email = txtEmail.getText();
                //[a-zA-Z] : bắt đầu phải là 1 ký tự chữ hoa hoặc thường
                //[a-zA-Z0-9]+ : sau ký tự đầu tiên chữ hoặc số đều được và được viết nhiều lần
                //(\\.[a-zA-Z]+)+ : một cụm có 1 hoặc ký tự ".com" hoặc ".com.vn" ddcuuocwjj lặp lại nhiều lần
                Pattern p = Pattern.compile("^[a-zA-Z][a-zA-Z0-9]+@[a-zA-Z]+(\\.[a-zA-Z]+){1,3}$");
                if (p.matcher(email).find()) {
                    txtEmail.setBackground(Color.white);
                } else {
                    sb.append("Email không hợp lệ, ký tự đầu tiên phải là chữ. VD: hn12345.gmail.com, tuan123ct@student.ctu.edu.vn\n");
                    txtEmail.setBackground(Color.green);
                }
            }
        } catch (Exception e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Content;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel Main;
    private javax.swing.JLabel Title;
    private BODY.Button.ButtonLogin btnReg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel iconPassword;
    private javax.swing.JLabel iconUsername;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDiachi;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGioitinh;
    private javax.swing.JLabel lblHovaten;
    private javax.swing.JLabel lblMatKhau;
    private javax.swing.JLabel lblNgaysinh;
    private javax.swing.JLabel lblSdt;
    private javax.swing.JLabel lblTaiKhoan;
    private javax.swing.JPanel panelMatKhau;
    private javax.swing.JPanel panelTaiKhoan;
    private javax.swing.JPanel panelThongTinUser;
    private javax.swing.JRadioButton rdbFemale;
    private javax.swing.JRadioButton rdbMale;
    private com.toedter.calendar.JDateChooser txtDate;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTaiKhoan;
    // End of variables declaration//GEN-END:variables
}
