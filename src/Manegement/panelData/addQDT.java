/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Manegement.panelData;

import Manegement.classData.listQDT;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import user.Connect;

/**
 *
 * @author HP
 */
public class addQDT extends javax.swing.JPanel {

    DefaultTableModel tbn = new DefaultTableModel();
    Connect a = new Connect();
    Connection con = a.getConnection();
    Statement st = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    String fPath = null;
    byte[] img_DATA;

    String MaCHDT = "";
    int flag = 1;

    public addQDT() {
        initComponents();
        getSumRow();
        load_dataCHĐT();
        //getConnection();
        loadDataCBBTopic();
        loadDataCBBMaTV();
    }

    public void loadDataCBBTopic() {
        try {
            pst = con.prepareStatement("Select * from ChuDe");
            rs = pst.executeQuery();

            while (rs.next()) {
                cbbTopic.addItem(rs.getString("TenChuDe"));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi lấy tên chủ đề!");
        }
    }

    public void loadDataCBBMaTV() {
        try {
            pst = con.prepareStatement("Select MaTV from TuVung");
            rs = pst.executeQuery();

            while (rs.next()) {
                cbbMaTV.addItem(rs.getString("MaTV"));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi lấy mã từ vựng!");
        }
    }

    public ArrayList<listQDT> listQuestionDTManagement() {
        ArrayList<listQDT> adList = new ArrayList<>();
        try {
            String url = "Select * from CauHoiDT";
            st = con.createStatement();
            rs = st.executeQuery(url);
            listQDT data;
            while (rs.next()) {
                //data = new listQ(rs.getString("ID_Question"), rs.getString("Question"), rs.getString("Option1"), rs.getString("Option2"), rs.getString("Option3"), rs.getString("Option4"), rs.getBytes("Image"), rs.getString("Answer"), rs.getString("Level"));
                data = new listQDT(rs.getString("MaCHDT"), rs.getString("CauHoiDT"), rs.getBytes("HinhAnh"), rs.getString("CauTraLoi"), rs.getString("TenChuDe"), rs.getString("MaTV"));
                adList.add(data);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi lấy dữ liệu!");
        }
        return adList;
    }

    public void load_dataCHĐT() {
        ArrayList<listQDT> list = listQuestionDTManagement();
        tbn = (DefaultTableModel) tblListQuestion.getModel();
        tbn.setRowCount(0);
        for (listQDT i : list) {
            tbn.addRow(new Object[]{i.getMaCHDT(), i.getCauHoiDT(), i.getImage(), i.getCauTraLoi(), i.getTenChuDe(), i.getMaTV()});
        }
        JTableHeader Theader = tblListQuestion.getTableHeader();

        Theader.setBackground(Color.DARK_GRAY);
        Theader.setForeground(Color.black);

        Theader.setFont(new Font("Roboto", Font.BOLD, 17));
        ((DefaultTableCellRenderer) Theader.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        tblListQuestion.setFont(new Font("Roboto", Font.PLAIN, 17));
        tblListQuestion.setSelectionBackground(new Color(59, 89, 152));
        tblListQuestion.setSelectionForeground(Color.white);

        dataEnabledButton();
        reset();
    }

    public ImageIcon ResizeImage(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        Header = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListQuestion = new javax.swing.JTable();
        Main = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIDQuestion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtQuestion = new javax.swing.JTextArea();
        lblImg = new javax.swing.JLabel();
        txtAnswer = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cbbTopic = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cbbMaTV = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnChooseImage = new javax.swing.JButton();
        btnTaoMa = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1392, 812));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("BẢNG DỮ LIỆU CÂU HỎI ĐIỀN TỪ");
        jLabel4.setPreferredSize(new java.awt.Dimension(393, 100));
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 2, 1388, -1));

        jSeparator2.setBackground(new java.awt.Color(0, 120, 255));
        jSeparator2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jSeparator2.setOpaque(true);
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 300, 5));

        Header.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        Header.setAutoscrolls(true);
        Header.setPreferredSize(new java.awt.Dimension(1392, 300));
        Header.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 102));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setOpaque(true);

        tblListQuestion.setAutoCreateRowSorter(true);
        tblListQuestion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEtchedBorder()));
        tblListQuestion.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        tblListQuestion.setForeground(new java.awt.Color(0, 0, 0));
        tblListQuestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MÃ CHĐT", "CÂU HỎI", "HÌNH ẢNH", "CÂU TRẢ LỜI", "TÊN CHỦ ĐỀ", "MÃ TV"
            }
        ));
        tblListQuestion.setRowHeight(40);
        tblListQuestion.setRowMargin(5);
        tblListQuestion.setShowHorizontalLines(true);
        tblListQuestion.setShowVerticalLines(true);
        tblListQuestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListQuestionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListQuestion);

        Header.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(Header, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 510, 1392, -1));

        Main.setBackground(new java.awt.Color(252, 204, 99));
        Main.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        Main.setPreferredSize(new java.awt.Dimension(1392, 408));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Nội dung câu hỏi");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Mã câu hỏi");

        txtIDQuestion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setText("Đáp án");

        txtQuestion.setColumns(20);
        txtQuestion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtQuestion.setRows(5);
        jScrollPane2.setViewportView(txtQuestion);

        lblImg.setBackground(new java.awt.Color(255, 255, 255));
        lblImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        lblImg.setOpaque(true);

        txtAnswer.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setText("Tên chủ đề");

        cbbTopic.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        cbbTopic.setMaximumRowCount(3);

        txtSearch.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setText("Mã TV");

        cbbMaTV.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        cbbMaTV.setMaximumRowCount(5);
        cbbMaTV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Chọn MaTV ----" }));
        cbbMaTV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbMaTVActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/3844432_magnifier_search_zoom_icon.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("Tìm kiếm");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setOpaque(false);
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 10);
        flowLayout1.setAlignOnBaseline(true);
        jPanel2.setLayout(flowLayout1);

        btnAdd.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/34237_+_add_plus_icon.png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setPreferredSize(new java.awt.Dimension(160, 40));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel2.add(btnAdd);

        btnSave.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/285657_floppy_guardar_save_icon.png"))); // NOI18N
        btnSave.setText("Lưu");
        btnSave.setPreferredSize(new java.awt.Dimension(160, 40));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel2.add(btnSave);

        btnEdit.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/17009_arrows_exchange_interact_refresh_reload_icon.png"))); // NOI18N
        btnEdit.setText("Sửa");
        btnEdit.setPreferredSize(new java.awt.Dimension(160, 40));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jPanel2.add(btnEdit);

        btnDelete.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/34218_add_cross_delete_exit_remove_icon.png"))); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.setPreferredSize(new java.awt.Dimension(160, 40));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(btnDelete);

        btnReset.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/9855519_reset_reload_sync_update_icon.png"))); // NOI18N
        btnReset.setText("Làm sạch");
        btnReset.setPreferredSize(new java.awt.Dimension(160, 40));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel2.add(btnReset);

        btnChooseImage.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnChooseImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/211677_image_icon.png"))); // NOI18N
        btnChooseImage.setText("Tải ảnh");
        btnChooseImage.setPreferredSize(new java.awt.Dimension(160, 40));
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });
        jPanel2.add(btnChooseImage);

        btnTaoMa.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        btnTaoMa.setText("Tạo mã");
        btnTaoMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoMaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainLayout = new javax.swing.GroupLayout(Main);
        Main.setLayout(MainLayout);
        MainLayout.setHorizontalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainLayout.createSequentialGroup()
                        .addContainerGap(59, Short.MAX_VALUE)
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainLayout.createSequentialGroup()
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(MainLayout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37))
                                    .addGroup(MainLayout.createSequentialGroup()
                                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)))
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainLayout.createSequentialGroup()
                                        .addComponent(txtIDQuestion)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnTaoMa))
                                    .addComponent(txtAnswer, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbbTopic, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbbMaTV, 0, 250, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(54, 54, 54)
                .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(123, 123, 123)
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainLayout.createSequentialGroup()
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainLayout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch))
                            .addComponent(jLabel3))
                        .addGap(73, 73, 73)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        MainLayout.setVerticalGroup(
            MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearch)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(MainLayout.createSequentialGroup()
                        .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtIDQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnTaoMa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbTopic, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbMaTV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 81, Short.MAX_VALUE)))
                .addContainerGap())
        );

        add(Main, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 102, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (txtIDQuestion.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Nhập mã cần xóa!");
        } else {
            try {
                pst = con.prepareStatement("Delete CauHoiDT where MaCHDT=?");
                pst.setString(1, tblListQuestion.getValueAt(tblListQuestion.getSelectedRow(), 0).toString());
                if (JOptionPane.showConfirmDialog(this, "Bạn có muốn xóa?", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    pst.executeUpdate();
                    load_dataCHĐT();
                    dataEnabledButton();
                    reset();
                    flag--;
                    JOptionPane.showMessageDialog(this, "Xóa thành công");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Xóa thất bại");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (txtIDQuestion.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Nhập mã cần sửa nội dung!");
        } else {
            try {
                pst = con.prepareStatement("Update CauHoiDT set CauHoiDT=?, HinhAnh=?,CauTraLoi=?,TenChuDe=?,MaTV=? where MaCHDT=?");
                pst.setString(6, txtIDQuestion.getText());
                pst.setString(1, txtQuestion.getText());
                pst.setBytes(2, img_DATA);
                pst.setString(3, txtAnswer.getText());
                pst.setString(4, cbbTopic.getSelectedItem().toString());
                pst.setString(5, cbbMaTV.getSelectedItem().toString());
                pst.executeUpdate();
                load_dataCHĐT();
                dataEnabledButton();
                reset();
                JOptionPane.showMessageDialog(this, "Cập nhật thành công.");
            } catch (Exception e) {
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        StringBuilder sb = new StringBuilder();
        try {
            if (txtIDQuestion.getText().equals("") || txtQuestion.getText().equals("") || txtAnswer.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Dữ liệu không được bỏ trống!");
            } else {
                hopleMaCHDT(sb);
                if (sb.length() > 0) { //nếu if trên đúng nó sẽ thêm vào sb 1 đoạn string, ktra độ dài chuỗi này nếu lớn hơn 0 tức là có thông báo
                    JOptionPane.showMessageDialog(this, sb.toString());
                } else {
                    String url = "insert into CauHoiDT values (?,?,?,?,?,?)";
                    pst = con.prepareStatement(url);
                    pst.setString(1, txtIDQuestion.getText());
                    pst.setString(2, txtQuestion.getText());
                    pst.setBytes(3, img_DATA);
                    pst.setString(4, txtAnswer.getText());
                    pst.setString(5, cbbTopic.getSelectedItem().toString());
                    pst.setString(6, cbbMaTV.getSelectedItem().toString());
                    pst.executeUpdate();
                    load_dataCHĐT();
                    dataEnabledButton();
                    reset();
                    flag++;
                    JOptionPane.showMessageDialog(null, "Lưu dữ liệu thành công.");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        dataNotEnabledButton();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        dataNotEnabledButton();
        try {
            pst = con.prepareStatement("Select * from CauHoiDT where MaCHDT=?");
            pst.setString(1, txtSearch.getText());
            rs = pst.executeQuery();
            while (rs.next()) {
                txtIDQuestion.setText(rs.getString("MaCHDT"));
                txtQuestion.setText(rs.getString("CauHoiDT"));
                byte[] img = rs.getBytes("HinhAnh");
                txtAnswer.setText(rs.getString("CauTraLoi"));
                cbbTopic.setSelectedItem(rs.getString("TenChuDe"));
                cbbMaTV.setSelectedItem(rs.getString("MaTV"));

                ImageIcon imgIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
                lblImg.setIcon(imgIcon);
                img_DATA = img;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "KHÔNG TÌM THẤY!");
            dataEnabledButton();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbbMaTVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbMaTVActionPerformed
        txtSearch.setText("");
        try {
            pst = con.prepareStatement("Select * from CauHoiDT where MaTV=?");
            pst.setString(1, cbbMaTV.getSelectedItem().toString());
            rs = pst.executeQuery();
            if (rs.next()) {
                txtIDQuestion.setText(rs.getString("MaCHDT"));
                txtQuestion.setText(rs.getString("CauHoiDT"));
                txtAnswer.setText(rs.getString("CauTraLoi"));
                byte[] img = rs.getBytes("HinhAnh");
                ImageIcon imgIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
                lblImg.setIcon(imgIcon);
                img_DATA = img;
                cbbTopic.setSelectedItem(rs.getString("TenChuDe"));
            } else {
                txtIDQuestion.setText("");
                txtQuestion.setText("");
                pst = con.prepareStatement("SELECT * FROM TuVung WHERE MaTV=?");
                pst.setString(1, cbbMaTV.getSelectedItem().toString());
                rs = pst.executeQuery();
                if (rs.next()) {
                    byte[] img = rs.getBytes("HinhAnh");
                    txtAnswer.setText(rs.getString("TuVung"));
                    cbbTopic.setSelectedItem(rs.getString("TenChuDe"));
                    ImageIcon imgIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
                    lblImg.setIcon(imgIcon);
                    img_DATA = img;
                }
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_cbbMaTVActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        DefaultTableModel model = (DefaultTableModel) tblListQuestion.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<DefaultTableModel>(model);
        tblListQuestion.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(txtSearch.getText().trim()));
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tblListQuestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListQuestionMouseClicked
        int i = tblListQuestion.getSelectedRow();
        TableModel model = tblListQuestion.getModel();

        txtIDQuestion.setText(model.getValueAt(i, 0).toString());
        txtQuestion.setText(model.getValueAt(i, 1).toString());
        byte[] img = (listQuestionDTManagement().get(i).getImage());
        ImageIcon imgIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
        lblImg.setIcon(imgIcon);
        img_DATA = img;
        txtAnswer.setText(model.getValueAt(i, 3).toString());
        cbbTopic.setSelectedItem(model.getValueAt(i, 4).toString());
        cbbMaTV.setSelectedItem(model.getValueAt(i, 5).toString());

        dataNotEnabledButton();
    }//GEN-LAST:event_tblListQuestionMouseClicked

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
        JFileChooser fBuild = new JFileChooser("C:\\Java-JSP\\duan9\\src\\img\\Vocabulary");

        FileNameExtensionFilter fnef = new FileNameExtensionFilter("*.Image", "jpg", "png");
        fBuild.addChoosableFileFilter(fnef);

        int result = fBuild.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File f = fBuild.getSelectedFile();
            fPath = f.getAbsolutePath();
            ImageIcon imgIcon = new ImageIcon(new ImageIcon(fPath).getImage().getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), Image.SCALE_SMOOTH));
            lblImg.setIcon(ResizeImage(fPath));
        }

        try {
            File image = new File(fPath);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readNum; (readNum = fis.read(buf)) != -1;) {
                bos.write(buf, 0, readNum);
            }
            img_DATA = bos.toByteArray();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void btnTaoMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoMaActionPerformed
        SinhMaBKT();
    }//GEN-LAST:event_btnTaoMaActionPerformed

    //Đếm số lượng dòng bài kiểm tra
    public void getSumRow() {
        try {
            pst = con.prepareStatement("Select * from CauHoiDT");
            rs = pst.executeQuery();

            while (rs.next()) {
                flag++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi tải dữ liệu mã câu hỏi điền từ!");
        }
    }

    //Sinh mã bài kiểm tra
    public void SinhMaBKT() {
        try {
            pst = con.prepareStatement("Select * from CauHoiDT");
            rs = pst.executeQuery();

            int i = 1;
            while (rs.next()) {
                String checkMaBKT = rs.getString("MaCHDT");

                String temp = "";
                if (i < 10) {
                    temp = "DT00" + i;
                } else {
                    temp = "DT0" + i;
                }

                if (i < flag - 1 && !checkMaBKT.trim().equals(temp)) {
                    if (i < 10) {
                        MaCHDT = "DT00" + i;
                    } else {
                        MaCHDT = "DT0" + i;
                    }
                    break;
                }
                i += 1;
                if (i == flag) {
                    if (i < 10) {
                        MaCHDT = "DT00" + i;
                    } else {
                        MaCHDT = "DT0" + i;
                    }
                }
            }
//            if (MaBKT.isEmpty()) {
//                MaBKT = "BKT0" + 1;
//            }
            txtIDQuestion.setText(MaCHDT);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi tải dữ liệu MaCHDT!");
        }
    }

    private void hopleMaCHDT(StringBuilder sb) {
        try {
            String check_url = "Select * from CauHoiDT where MaCHDT = '" + txtIDQuestion.getText() + "'";
            st = con.createStatement();
            rs = st.executeQuery(check_url);

            //Kiểm tra trùng id
            if (rs.next()) {
                sb.append("Mã câu hỏi điền từ này đã tồn tại!\n");
                txtIDQuestion.setBackground(Color.green);
            } else {
                String MaCHDT = txtIDQuestion.getText().trim();
                //Mã ND phải gồm EFK và 3 chữ số
                String regex = "DT\\d{3}";
                Pattern pattern = Pattern.compile(regex);
                Matcher matcher = pattern.matcher(MaCHDT);
                if (!matcher.find()) {
                    sb.append("Mã câu hỏi điền từ sai định dạng, Mã câu hỏi điền từ phải gồm DT và 3 chữ số, VD: DT001\n");
                    txtIDQuestion.setBackground(Color.green);
                } else {
                    txtIDQuestion.setBackground(Color.white);
                }
            }
        } catch (Exception e) {
        }
    }

    public void dataEnabledButton() {
        btnAdd.setEnabled(true);
        btnSave.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnReset.setEnabled(false);
        txtIDQuestion.setEnabled(false);
        txtQuestion.setEnabled(false);
        cbbMaTV.setEnabled(false);
        cbbTopic.setEnabled(false);
        txtAnswer.setEnabled(false);
        lblImg.setEnabled(false);
        btnChooseImage.setEnabled(false);
        btnTaoMa.setEnabled(false);
    }

    public void dataNotEnabledButton() {
        btnAdd.setEnabled(false);
        btnSave.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnReset.setEnabled(true);
        txtIDQuestion.setEnabled(true);
        txtQuestion.setEnabled(true);
        cbbMaTV.setEnabled(true);
        cbbTopic.setEnabled(true);
        txtAnswer.setEnabled(true);
        lblImg.setEnabled(true);
        btnChooseImage.setEnabled(true);
        btnTaoMa.setEnabled(true);
    }

    public void reset() {
        txtIDQuestion.setText("");
        txtAnswer.setText("");
        txtQuestion.setText("");
        txtSearch.setText("");
        cbbMaTV.setSelectedIndex(0);
        cbbTopic.setSelectedIndex(-1);
        lblImg.setIcon(null);

        txtIDQuestion.setBackground(Color.white);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Header;
    private javax.swing.JPanel Main;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnTaoMa;
    private javax.swing.JComboBox<String> cbbMaTV;
    private javax.swing.JComboBox<String> cbbTopic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblImg;
    private javax.swing.JTable tblListQuestion;
    private javax.swing.JTextField txtAnswer;
    private javax.swing.JTextField txtIDQuestion;
    private javax.swing.JTextArea txtQuestion;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
